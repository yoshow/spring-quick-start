<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd  
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd              
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- SpringResourceTemplateResolver automatically integrates with Spring's own -->
	<!-- resource resolution infrastructure, which is highly recommended. -->
	<bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
		<property name="prefix" value="/WEB-INF/classes/views/" />
		<property name="suffix" value=".html" />
		<!-- HTML is the default value, added here for the sake of clarity. -->
		<property name="templateMode" value="HTML" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="true" />
	</bean>

	<!-- SpringTemplateEngine automatically applies SpringStandardDialect and -->
	<!-- enables Spring's own MessageSource message resolution mechanisms. -->
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<!-- Enabling the SpringEL compiler with Spring 4.2.4 or newer can speed up -->
		<!-- execution in most scenarios, but might be incompatible with specific -->
		<!-- cases when expressions in one template are reused across different data -->
		<!-- ypes, so this flag is "false" by default for safer backwards -->
		<!-- compatibility. -->
		<property name="enableSpringELCompiler" value="true" />
	</bean>
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager1" />

		<property name="viewResolvers">
			<list>
				<!-- Used here for 'xml' and 'atom' views -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<property name="order" value="1" />
				</bean>

				<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
					<property name="templateEngine" ref="templateEngine" />
					<property name="characterEncoding" value="UTF-8" />
					<property name="order" value="2" />
					<!-- We need to set exclusions because Content Negotiation tries to resolve from -->
					<!-- Thymeleaf even if a specific view bean (of a different class) is already -->
					<!-- found, which might cause exceptions (e.g. ThymeleafView does not have a -->
					<!-- 'marshaller' property). -->
					<property name="excludedViewNames" value="*.xml" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- Simple strategy: only path extension is taken into account -->
	<bean id="contentNegotiationManager1" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="atom" value="application/atom+xml" />
			</map>
		</property>
	</bean>

	<!-- 激活 @Controller 模式 -->
	<mvc:annotation-driven />
	<!-- 会把 "/**" url,注册到 SimpleUrlHandlerMapping 的 urlMap 中,把对静态资源的访问由 HandlerMapping -->
	<!-- 转到 org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler 处理并返回. -->
	<!-- DefaultServletHttpRequestHandler 使用就是各个 Servlet 容器自己的默认 Servlet. -->
	<mvc:default-servlet-handler />

	<!-- 对包中的所有类进行扫描，以完成 Bean 创建和自动依赖注入的功能 需要更改 -->
	<context:component-scan base-package="com.x3platform.web.controllers" />

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
</beans>